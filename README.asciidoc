ifdef::env-github[]
:tip-caption: :bulb:
:note-caption: :information_source:
:important-caption: :heavy_exclamation_mark:
:caution-caption: :fire:
:warning-caption: :warning:
endif::[]
:toc:
:toc-placement!:

[[beagleconnect]]
= BeagleConnect™

BeagleConnect™ is a revolutionary technology virtually eliminating low-level software
development for https://en.wikipedia.org/wiki/Internet_of_things[IoT] and https://en.wikipedia.org/wiki/Industrial_internet_of_things[IIoT] applications, such as building automation, factory
automation, and home automation. While numerous IoT and IIoT solutions available today
provide massive software libraries for microcontrollers footnote:[Complexity can be seen by exploring https://www.arduino.cc/reference/en/libraries/category/sensors/[Arduino sensor libraries]]
supporting a limited body of
https://en.wikipedia.org/wiki/Sensor[sensors],
https://en.wikipedia.org/wiki/Actuator[actuators] and
https://en.wikipedia.org/wiki/Indicator_(distance_amplifying_instrument)[indicators]
as well as libraries for communicating over various networks,
BeagleConnect simply eliminates the need for these libraries by shifting the burden
into the most massive and collaborative software project of all time, the https://en.wikipedia.org/wiki/Linux_kernel[Linux kernel].

These are the tools used to automate things in
https://en.wikipedia.org/wiki/Mechatronics[mechatronics] and
https://en.wikipedia.org/wiki/Internet_of_things[IoT].

BeagleConnect™ solves: 

* The need to write software to add a large set of diverse devices to your system, 
* The need to maintain the software with security updates, 
* The need to rapidly prototype using off-the-shelf software and hardware without wiring, 
* The need to connect to devices using long-range, low-power wireless, and 
* The need to produce high-volume custom hardware cost-optimized for your requirements.

The initial _BeagleConnect™ Freedom_ development release will: 

* Support at least 100 https://elinux.org/Mikrobus[mikroBUS]-based https://mikroe.com/click[Click boards from Mikroelectronika], 
* Work with https://en.wikipedia.org/wiki/Bluetooth_Low_Energy[Bluetooth Low Energy (BLE)]-enabled Linux computers at 2.4GHz, 
* Work with long-range sub-1GHz https://en.wikipedia.org/wiki/IEEE_802.15.4[IEEE 802.15.4 wireless connections] at 500 meters with data rates of 1kbps, and 
* Work with a low-cost BeagleBoard.org Linux https://en.wikipedia.org/wiki/Single-board_computer[single-board computer (SBC)] as a `BeagleConnect™ gateway device` and
  work with at least 10 other `BeagleConnect™ node devices` each supporting 2 add-on sensor, actuator or indicator devices.


IMPORTANT: _BeagleConnect™ Freedom_ enables wirelessly adding new device nodes and is targeted
to cost roughly US$10.

Future releases will be collaborated with the community, evolve
dynamically, and contain additional functionality. The goal is to
support over 500 add-on devices within the first year after the
development release.

NOTE: The term _BeagleConnect™_ refers to a technology comprising of
a family of boards, a collection of Linux kernel drivers,
microcontroller firmware, a communication protocol, and system-level
integration to automation software tools. More specific terms will be
applied in the architecture details. The term is also used here to
represent the experience introduced to users through the initial
_BeagleConnect™ Freedom_ product consiting of a board and case which
ships programmed and ready to be used.

toc::[]

[[story]]
== The Story Behind BeagleConnect™ 

[[long-background]]
=== The Long Background
There are many stories behind BeagleConnect™, mine is just one of them. It begins
with my mom teaching me about computers. She told me I could anything I wanted
with ours, as long as I didn't open the case. This was the late-70s/early-80s, so
all she needed to do was put her https://en.wikipedia.org/wiki/Floppy_disk[floppy disk]
away and there wasn't risk of me damaging the family photo album or her ability to
do her work the next day. I listened and learned from her the basics of programming, but
it wasn't long before I wanted to take the computer apart. 

Exploring http://www.forrestmims.com/[Getting Started in Electronics] satisfied my
itch for quite a while. Eventually, I got a Commodore 64 and began connecting voice
synthesizer ICs to it. My interest in computers and electronics flourished into
an electrical engineering degree and a long career in the semiconductor industry.

Over this time, I've become more and more alarmed with the progress of technology. Now,
to be clear, I love technology. I love innovation and invention. It is just that some
things have evolved in a sort of tunnel-vision, without bringing everyone along.

As graphical user interfaces and mice took over computers, they rapidly became almost
unusable by my mom. She typed well, but the dexterity to move a mouse aluded her.
To satisfy the need to interact with locations on the screen, she adopted using a
joystick and her productivity came to a crawl. How is it that such assumptions could
be made impacting *all* computer users without any thoughtful provisions for what
already worked?

Get on https://beagleboard.org/about/jkridner[my calendar] if you'd like to chat
with me more about this story.

[[beagleconnect-leash]]
== BeagleConnect™ Freedom
_BeagleConnect™ Freedom_ is based on the TI CC1352 and is the first available
BeagleConnect™ solution. It implements:

* `BeagleConnect™ gateway device` function for Sub-GHz 802.15.4 long-range wireless
* `BeagleConnect™ node device` function for Bluetooth Low-Energe (BLE) and Sub-GHz
802.15.4 long range wireless
* USB-based serial console and firmware updates
* 2x mikroBUS sockets with `BeagleConnect™ protocol support`

[.float-group]
--
image:https://raw.githubusercontent.com/jadonk/beagleconnect/demo/case/Industrial%20design/BeagleConnect_ID_1.png[BeagleConnect™ case design,300,240,title="BeagleConnect™ Leash case",role="related thumb left"]
image:https://github.com/jadonk/beagleconnect/blob/master/docs/MVIMG_20200410_095337.jpg[BeagleConnect™ Leash rev B prototype,300,200,title="BeagleConnect™ Leash",role="related thumb right"]
--

[[what-is-new]]
== What makes BeagleConnect™ new and different?

IMPORTANT: BeagleConnect™ solves IoT in a different and better way than any previous
solution.

[[the-device-interface-software-is-already-done]]
=== The device interface software is already done

BeagleConnect™ uses the collaboratively developed Linux kernel to contain
the intelligence required to speak to these devices (sensors, actuators,
and indicators), rather than relying on writing code on a
microcontroller specific to these devices. Some existing solutions rely
on large libraries of microcontroller code, but the integration of
communications, maintenance of the library with a limited set of
developer resources and other constraints to be explained later make
those other solutions less suitable for rapid prototyping than
BeagleConnect™.

Linux presents these devices abstractly in ways that are
self-descriptive. Add an accelerometer to the system and you are
automatically fed a stream of force values in standard units. Add a
temperature sensor and you get it back in standard units again. Same for
sensing magnetism, proximity, color, light, frequency, orientation, or
multitudes of other inputs. Indicators, such as LEDs and displays, are
similarly abstracted with a few other kernel subsystems and more
advanced actuators with and without feedback control are in the process
of being developed and standardized. In places where proper Linux kernel
drivers exist, no new specialized code needs to be created for the
devices.

IMPORTANT: _Bottom line_: For hundreds of devices, users won't have to write a
single line of code to add them their systems. The automation code they
do write can be extremely simple, done with graphical tools or in any
language they want. Maintenance of the code is centralized in a small
reusable set of microcontroller firmware and the Linux kernel, which is
highly peer reviewed under a
https://wiki.p2pfoundation.net/Linux_-_Governance[highly-regarded
governance model].

[[on-going-maintenance]]
=== On-going maintenance

Because there isn't code specific to any given network-of-devices
configuration, we can all leverage the same software code base. This
means that when someone fixes an issue in either BeagleConnect™ firmware
or the Linux kernel, you benefit from the fixes. The source for
BeagleConnect™ firmware is also submitted to the
https://www.zephyrproject.org/[Zephyr Project] upstream, further
increasing the user base. Additionally, we will maintain stable branches
of the software and provide mechanisms for updating firmware on
BeagleConnect™ hardware. With a single, relatively small firmware load,
the potential for bugs is kept low. With large user base, the potential
for discovering and resolving bugs is high.

[[rapid-prototyping-without-wiring]]
=== Rapid prototyping without wiring

BeagleConnect™ utilizes the https://elinux.org/Mikrobus[mikroBUS
standard]. The mikroBUS standard interface is flexible enough for almost
any typical sensor or indicator with hundreds of devices available.

NOTE: Currently, we have support in the Linux kernel for a bit over 100
_Click_ mikroBUS add-on boards from Mikroelektronika and are working
with Mikroelektronika on a updated version of the specification for these
boards to self-identify. Further, eventually the vast majority of over
800 currently available _Click_ mikroBUS add-on boards will be supported
as well as the hundreds of compliant boards developed every year.

[[long-range-low-power-wireless]]
=== Long-range, low-power wireless

_BeagleConnect™ Freedom_ wireless hardware is built around a
http://www.ti.com/product/CC1352R[TI CC1352] multiprotocol and multi-band Sub-1 GHz and 2.4-GHz wireless 
microcontroller (MCU). CC1352R includes a 48-MHz Arm® Cortex®-M4F processor, 352KB Flash, 256KB ROM, 8KB Cache SRAM,
80KB of ultra-low leakage SRAM, and Over-the-Air upgrades (OTA).

[[full-customization-possible]]
=== Full customization possible

BeagleConnect™ utilizes https://www.oshwa.org/definition/[open source
hardware] and https://en.wikipedia.org/wiki/Open-source_software[open
source software], making it possible to optimize hardware and software
implementations and sourcing to meet end-product requirements.
BeagleConnect™ is meant to enable rapid-prototyping and not to
necessarily satisfy any particular end-product's requirements, but with
full considerations for go-to-market needs.

Each BeagleBoard.org BeagleConnect™ solution will be:

* Readily available for over 10 years, 
* Built with fully
open source software with submissions to mainline Linux and Zephyr
repositories to aide in support and porting, 
* Built with fully open
source and non-restrictive hardware design including schematic,
bill-of-materials, layout, and manufacturing files (with only the
BeagleBoard.org logo removed due to licensing restrictions of our
brand), 
* Built with parts where at least a compatible part is available
from worldwide distributors in any quantity, 
* Built with design and
manufacturing partners able to help scale derivative designs, 
* Based on
a security model using public/private keypairs that can be replaced to
secure your own network, and 
* Fully FCC/CE certified.

[[usage]]
== Usage
This section describes the usage model we are developing. To use the current code in development,
please refer to the <<development>> section below.

[[beagleconnect-user-experience]]
=== BeagleConnect™ wireless user experience

[[enable-a-linux-host-with-beagleconnect]]
==== Enable a Linux host with BeagleConnect™

image:https://github.com/jadonk/beagleconnect/blob/master/docs/ProvStep1.PNG?raw=true[Provisioning
Step 1] Log into a host system running Linux that is BeagleConnect™
enabled. Enable a Linux host with BeagleConnect™ by plugging a
`BeagleConnect™ gateway device` into it's USB port. You'll also want to have a
`BeagleConnect™ node device` with a sensor, actuator or indicator device connected.

NOTE: _BeagleConnect™ Freedom_ can act as either a `BeagleConnect™ gateway device` or a
`BeagleConnect™ node device`.

IMPORTANT: The Linux host will need to run the `BeagleConnect™ management
software`, most of which is incorporated into the Linux kernel. Support will
be provided for BeagleBoard and BeagleBone boards, x86 hosts, and Raspberry Pi.

#TODO: Clean up images#

[[connect-host-and-device]]
==== Connect host and device

image:https://github.com/jadonk/beagleconnect/blob/master/docs/ProvStep2.PNG?raw=true[Provisioning
Step 2] Initiate a connection between the host and devices by pressing
the discovery button(s).

[[device-data-shows-up-as-files]]
==== Device data shows up as files

image:https://github.com/jadonk/beagleconnect/blob/master/docs/ProvStep3.PNG?raw=true[Provisioning
Step 3] New streams of self-describing data show up on the host system
using native device drivers.

High-level applications, like `Node-RED`, can directly read/write these high-level
data streams (including data-type information) to Internet-based MQTT brokers,
live dashboards, or other logical operations without requiring any sensor-specific
coding. Business logic can be applied using simple if-this-then-that style operations
or be made as complex as desired using virtually any programming language or environment.

#TODO: Actually, Node-RED will make these show up automatically as streams.#

[[components]]
=== Components

[horizontal]
BeagleConnect™ enabled host:: Linux computer, possibly single-board computer (SBC), with
`BeagleConnect™ management software` and `BeagleConnect™ gateway function`. `BeagleConnect™ gateway
function` can be provided by a `BeagleConnect™ compatible interface` or by connecting a
`BeagleConnect™ gateway device` over USB.
+
NOTE: If the Linux host has BLE, the BeagleConnect™ is optional for short distances
+

BeagleConnect™ Freedom:: Board, case, and wireless MCU with `Zephyr` based firmware for acting
as either a `BeagleConnect™ gateway device` or `BeagleConnect™ node device`.
* In `BeagleConnect™ gateway device` mode:
** Provides long-range, low-power wireless communications,
** Connects with the `host` via USB and an associated Linux kernel driver, and
** Is powered by the USB connector.
* In `BeagleConnect™ node device` mode:
** Powered by a battery or USB connector
** Provides 2 mikroBUS connectors for connecting any of hundreds of
https://bbb.io/click[Click Board] mikroBUS add-on devices
** Provides new Linux host controllers for SPI, I2C, UART, PWM, ADC, and
GPIO with interrupts via `Greybus`

BeagleConnect™ gateway device:: Provides a `BeagleConnect™ compatible interface` to a host. This
could be a built-in interface device or one connected over USB. _BeagleConnect™ Freedom_ can provide
this function.

BeagleConnect™ node device:: Utilizes a `BeagleConnect™ compatible interface` and #TODO#

BeagleConnect™ compatible interface:: Immediate plans are to support Bluetooth Low Energy (BLE),
2.4GHz IEEE 802.15.4, and Sub-GHz IEEE 802.15.4 _wireless_ interfaces. A built-in BLE interface is
suitable for this at short range, whereas IEEE 802.15.4 is typically significantly better at long
ranges. Other _wired_ interfaces, such as _CAN_ and _RS-485_, are being considered for future
`BeagleConnect™ gateway device` and `BeagleConnect™ node device` designs.

Greybus:: #TODO#

TODO: Find a place for the following notes:

** The device interfaces get exposed to the host via Greybus BRIDGED_PHY
protocol
** The I2C bus is probed for a an identifier EEPROM and appropriate
device drivers are loaded on the host
** Unsupported Click Boards connected are exposed via userspace drivers
on the host for development

[[whats-different]]
=== What's different

So, in summary, what is so different with this approach?

* No microcontroller code development is required by users
* Userspace drivers make rapid prototyping really easy
* Kernel drivers makes the support code collaborative parts of the Linux
kernel, rather than cut-and-paste

[[development]]
== Development

[[equipment]]
=== Equipment
#TODO: This is where I need to pick back up, moving equipment notes from down below up
to here.#

There are several different development equipment options. The earliest available option...

[horizontal]
Host:: x86 Linux machine
BeagleConnect™ gateway device::
+
* http://www.ti.com/tool/launchxl-cc1352r1[CC1352R Launchpad] and
* http://shop.sysmocom.de/products/atusb[atusb dongle]
+
BeagleConnect™ node device::
+
* http://www.ti.com/tool/launchxl-cc1352r1[CC1352R Launchpad] and 
* https://www.mikroe.com/click-booster-pack-2[Click BoosterPack 2]
+


[[background]]
=== Background

image:https://github.com/jadonk/beagleconnect/blob/master/docs/SoftwareProp.PNG?raw=true[Software
Proposition] BeagleConnect™ uses Greybus and updated Click Boards with
identifiers to eliminate the need to add manually configure devices
added onto the Linux system.

[[high-level]]
==== High-level

* For Linux nerds: Think of BeagleConnect™ as
https://en.wikipedia.org/wiki/6LoWPAN[6LoWPAN] over
https://en.wikipedia.org/wiki/IEEE_802.15.4[802.15.4]-based
https://kernel-recipes.org/en/2015/talks/an-introduction-to-greybus/[Greybus]
(instead of Unipro as used by Project Ara), where every BeagleConnect™
board shows up as new SPI, I2C, UART, PWM, ADC, and GPIO controllers
that can now be probed to load drivers for the sensors or whatever is
connected to them. (Proof of concept of Greybus over TCP/IP:
https://www.youtube.com/watch?v=7H50pv-4YXw)
* For MCU folks: Think of BeagleConnect™ as a
https://github.com/firmata/protocol[Firmata]-style firmware load that
exposes the interfaces for remote access over a secured wireless
network. However, instead of using host software that knows how to speak
the Firmata protocol, the Linux kernel speaks the slightly similar
Greybus protocol to the MCU and exposes the device generically to users
using a Linux kernel driver. Further, the Greybus protocol is spoken
over https://en.wikipedia.org/wiki/6LoWPAN[6LoWPAN] on
https://en.wikipedia.org/wiki/IEEE_802.15.4[802.15.4].

[[software-architecture]]
==== Software architecture

* 802.15.4 provides the #TODO#

[[todo-items]]
TODO items
~~~~~~~~~~

* Linux kernel driver
* Provisioning
* Firmware for host CC13x
* Firmware for device CC13x
* Click Board drivers and device tree formatted metadata for 100 or so
Click Boards
* Click Board plug-ins for node-red for the same 100 or so Click Boards
* BeagleConnect™ Freedom System Reference Manual and FAQs

[[associated-pre-work]]
Associated pre-work
~~~~~~~~~~~~~~~~~~~

* Click Board support for Node-RED can be executed with native
connections on PocketBeagle+TechLab and BeagleBone Black with mikroBUS
Cape
* Device tree fragments and driver updates can be provided via
https://bbb.io/click
* The Kconfig style provisioning can be implemented for those solutions,
which will require a reboot. We need to centralize edits to
/boot/uEnv.txt to be programmatic. As I think through this, I don't
think BeagleConnect is impacted, because the Greybus-style discovery
along with Click EEPROMS will eliminate any need to edit /boot/uEnv.txt.

[[user-experience-concerns]]
User experience concerns
~~~~~~~~~~~~~~~~~~~~~~~~

* Make sure no reboots are required
* Plugging BeagleConnect into host should trigger host configuration
* Click EEPROMs should trigger loading whatever drivers are needed and
provisioning should load any new drivers
* Userspace (spidev, etc.) drivers should unload cleanly when 2nd phase
provisioning is completed

[[demo-1]]
== 2.4GHz IEEE 802.15.4 Greybus demo for GPIO and I2C

This document describes, in some detail, the steps required to use
https://en.wikipedia.org/wiki/Linux[Linux] workstation and the
https://lwn.net/Articles/715955/[Greybus] protocol, over an IEEE
802.15.4 wireless link, to blink an LED on a
https://zephyrproject.org[Zephyr] device.

=== Introduction

==== Why??

Good question. Blinking an LED is kind of the
https://en.wikipedia.org/wiki/%22Hello,_World!%22_program[Hello, World]
of the hardware community. In this case, we’re less interested in the
mechanics of switching a GPIO to drive some current through an LED and
more interested in how that happens with the
https://en.wikipedia.org/wiki/Internet_of_things[Internet of Things
(IoT)].

There are several existing network and application layers that are
driven by corporate heavyweights and industry consortiums, but
relatively few that are community driven and, more specifically, even
fewer that have the ability to integrate so tightly with the Linux
kernel.

The goal here is to provide a community-maintained, developer-friendly,
and open-source protocol for the Internet of Things using the Greybus
Protocol, and blinking an LED using Greybus is the simplest
proof-of-concept for that. All that is required is a reliable transport.

==== History

There are a few technologies at the core of this demonstration, and far
too much background information to describe adequately here, so they are
simply listed below for brevity:

* https://en.wikipedia.org/wiki/Project_Ara[Project Ara]
* https://en.wikipedia.org/wiki/IPv6[IPv6] (via
https://en.wikipedia.org/wiki/6LoWPAN[6LoWPAN])
* https://zephyrproject.org[Zephyr] support for
https://docs.zephyrproject.org/latest/reference/networking/ieee802154.html[IEEE
802.15.4]
* https://youtu.be/UzRq8jAHAxU[Greybus] originally from
https://youtu.be/UzRq8jAHAxU[Project Ara]
* https://youtu.be/7H50pv-4YXw[Using Greybus for IoT]

In short, Greybus is an application layer protocol that can be described
as a ``bus transport'' in that it conveys bus-specific messages back and
forth between Linux and a connected device. The physical bus is attached
to the connected device, which could be running Linux or a variety of
Real-Time Operating Systems. Meanwhile, on the Linux side, a virtual bus
is created corresponding to the physical bus on the connected device. To
the user, this virtual bus (be it /dev/gpiochip0, /dev/i2c5, etc)
appears and functions exactly the same. Greybus is the protocol used to
exchange bus-specific messages and data between Linux and the connected
device.

The major advantage there is that drivers can be well maintained in
Linux rather than buried in microcontroller firmware.

Greybus currently supports several busses, including:

* USB
* I2C
* GPIO
* PWM
* SPI
* UART
* SDIO
* Camera (V4L)
* LED (with various programmability)
* AUDIO (I2S)

==== Hardware Requirements

WARNING: Things might fail silently if you have the wrong board or wrong revision.

* a Linux workstation running https://releases.ubuntu.com/18.04.4[Ubuntu
Bionic]
** Only x86_64 is supported at this time
* a https://www.ti.com/tool/LAUNCHXL-CC1352R1[CC1352R1 LaunchPad]
** Please ensure that you purchase a device with
http://www.ti.com/lit/er/swrz077b/swrz077b.pdf[Revision E Silicon] to
avoid silicon errata.
** Also ensure that all jumpers are connected
`GND, 5V, 3V3, RXD<<, TXD>>, RST, TMS, TCK, TDO, TDI, SW0`
* a USB IEEE 802.15.4 adapter
** In this example, we use the
http://downloads.qi-hardware.com/people/werner/wpan/web[atusb]
** Available for purchase from
http://shop.sysmocom.de/products/atusb[sysmocom]
** This part is https://www.oshwa.org/[OSHW] (i.e. all CAD files and
firmware source is available) for those who choose to create their own.

=== Prerequisites

* Zephyr environment is set up according to the
https://docs.zephyrproject.org/latest/getting_started/index.html[Getting
Started Guide]
** Please use the Zephyr SDK when installing a toolchain above
* https://docs.zephyrproject.org/latest/getting_started/index.html#install-a-toolchain[Zephyr
SDK] is installed at ~/zephyr-sdk-0.11.2 (any later version should be
fine as well)
* Zephyr board is connected via USB

=== Cloning the repository

This repository utilizes
https://git-scm.com/book/en/v2/Git-Tools-Submodules[git submodules] to keep
track of all of the projects required to reproduce the on-going work.
The instructions here only cover checking out the `demo` branch which
should stay in a tested state. On-going development will be on the
`master` branch.

NOTE: The parent directory `~` is simply used as a placeholder for testing.
Please use whatever parent directory you see fit.

==== Clone specific tag

[source,console]
----
cd ~
git clone --recurse-submodules --branch demo https://github.com/jadonk/beagleconnect
----

=== Console (`tio`)

In order to see diagnostic messages or to run certain commands on the
Zephyr device we will require a terminal open to the device console. In
this case, we use https://tio.github.io/[tio] due how its usage
simplifies the instructions.

==== Install `tio`

[source,console]
----
sudo apt install -y tio
----

==== Run `tio`

Now, we’ll open a terminal to Zephyr using the newly created setup with
the command below.

[source,console]
----
tio /dev/ttyACM0
----

IMPORTANT: To exit `tio` (later), enter `ctrl+t, q`.

=== Zephyr

==== Add the Fork

For the time being, Greybus must remain outside of the main Zephyr
repository. Currently, it is just in a Zephyr fork, but it should be
converted to a proper
https://docs.zephyrproject.org/latest/guides/modules.html[Module
(External Project)]. This is for a number of reasons, but mainly there
must be:

* specifications for authentication and encryption 
* specifications for joining and rejoining wireless networks 
* specifications for discovery

Therefore, in order to reproduce this example, please run the following.

NOTE: Open a separate terminal window (`Ctrl+Shift+N`) or simply create a
new tab in your existing terminal (`Ctrl+Shift+T`) so that you can see
both or quickly switch between `tio` and the shell.

[source,console]
----
cd ~/beagleconnect/sw/zephyrproject/zephyr
west update
----

==== Build and Flash Zephyr

Here, we will build and flash the Zephyr
https://github.com/cfriedt/zephyr/tree/greybus-sockets/samples/subsys/greybus/net[greybus_net
sample] to our device.

[arabic]
. Edit the file `~/.zephyrrc` and place the following text inside of it
+
[source,console]
----
export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
export ZEPHYR_SDK_INSTALL_DIR=~/zephyr-sdk-0.11.2
----
+
. Set up the required Zephyr environment variables via
+
[source,console]
----
source zephyr-env.sh
----
+
. Build the project
+
[source,console]
----
BOARD=cc1352r1_launchxl west build samples/subsys/greybus/net --pristine \
  --build-dir build/greybus_launchpad -- -DCONF_FILE="prj.conf overlay-802154.conf"
----
+
. Ensure that the last part of the build process looks somewhat like
this:
+
....
...
[221/226] Linking C executable zephyr/zephyr_prebuilt.elf
Memory region         Used Size  Region Size  %age Used
           FLASH:      155760 B     360360 B     43.22%
      FLASH_CCFG:          88 B         88 B    100.00%
            SRAM:       58496 B        80 KB     71.41%
        IDT_LIST:         184 B         2 KB      8.98%
[226/226] Linking C executable zephyr/zephyr.elf
....
+
. Flash the firmware to your device using
+
[source,console]
----
BOARD=cc1352r1_launchxl west flash --build-dir build/greybus_launchpad
----

=== The Zephyr Shell

NOTE: This section is merely informative and you can skip ahead to the <<linux>> section if you'd like.

After flashing, you should observe the something matching the following
output in `tio`.

....
uart:~$ *** Booting Zephyr OS version 2.3.99  ***
[00:00:00.009,735] <inf> net_config: Initializing network
[00:00:00.109,741] <inf> net_config: IPv6 address: fe80::3177:a11c:4b:1200
[00:00:00.109,924] <dbg> greybus_service.greybus_service_init: Greybus initializing..
[00:00:00.110,168] <dbg> greybus_transport_tcpip.gb_transport_backend_init: Greybus TCP/IP Transport initializing..
[00:00:00.110,321] <dbg> greybus_transport_tcpip.netsetup: created server socket 0 for cport 0
[00:00:00.110,321] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 0
[00:00:00.110,321] <dbg> greybus_transport_tcpip.netsetup: binding socket 0 (cport 0) to port 4242
[00:00:00.110,351] <dbg> greybus_transport_tcpip.netsetup: listening on socket 0 (cport 0)
[00:00:00.110,534] <dbg> greybus_transport_tcpip.netsetup: created server socket 1 for cport 1
[00:00:00.110,534] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 1
[00:00:00.110,565] <dbg> greybus_transport_tcpip.netsetup: binding socket 1 (cport 1) to port 4243
[00:00:00.110,595] <dbg> greybus_transport_tcpip.netsetup: listening on socket 1 (cport 1)
[00:00:00.110,839] <inf> net_config: IPv6 address: fe80::3177:a11c:4b:1200
[00:00:00.110,992] <dbg> greybus_transport_tcpip.netsetup: created server socket 2 for cport 2
[00:00:00.110,992] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 2
[00:00:00.110,992] <dbg> greybus_transport_tcpip.netsetup: binding socket 2 (cport 2) to port 4244
[00:00:00.111,022] <dbg> greybus_transport_tcpip.netsetup: listening on socket 2 (cport 2)
[00:00:00.111,328] <inf> greybus_transport_tcpip: Greybus TCP/IP Transport initialized
[00:00:00.113,128] <inf> greybus_service: Greybus is active
[00:00:00.113,525] <dbg> greybus_transport_tcpip.accept_loop: calling poll
uart:~$ 
....

The line beginning with `+++***+++` is the Zephyr boot banner.

Lines beginning with a timestamp of the form `[H:m:s.us]` are Zephyr
kernel messages.

Lines beginning with `uart:~$` indicates that the Zephyr shell is
prompting you to enter a command.

From the informational messages shown, we observe the following.

* Zephyr is configured with the following
https://en.wikipedia.org/wiki/Link-local_address#IPv6[link-local IPv6
address] `fe80::3177:a11c:4b:1200`
* It is listening for (both) TCP and UDP traffic on port 4242

However, what the log messages do _not_ show (which will come into play
later), are 2 critical pieces of information:

1. *The RF Channel*: As you
may have guessed, IEEE 802.15.4 devices are only able to communicate
with each other if they are using the same frequency to transmit and
recieve data. This information is part of the Physical Layer.
2. The
https://www.silabs.com/community/wireless/proprietary/knowledge-base.entry.html/2019/10/04/connect_tutorial6-ieee802154addressing-rapc[PAN
identifier]: IEEE 802.15.4 devices are only be able to communicate with
one another if they use the _same_ PAN ID. This permits multiple
networks (PANs) on the same frequency. This information is part of the
Data Link Layer.

If we type `help` in the shell and hit _Enter_, we’re prompted with the
following:

[source,console]
----
Please press the <Tab> button to see all available commands.
You can also use the <Tab> button to prompt or auto-complete all commands or its subcommands.
You can try to call commands with <-h> or <--help> parameter for more information.
Shell supports following meta-keys:
Ctrl+a, Ctrl+b, Ctrl+c, Ctrl+d, Ctrl+e, Ctrl+f, Ctrl+k, Ctrl+l, Ctrl+n, Ctrl+p, Ctrl+u, Ctrl+w
Alt+b, Alt+f.
Please refer to shell documentation for more details.
----

So after hitting _Tab_, we see that there are several interesting
commands we can use for additional information.

[source,console]
----
uart:~$ 
  clear       help        history     ieee802154  log         net
  resize      sample      shell
----

===== Zephyr Shell: IEEE 802.15.4 commands

Entering `ieee802154 help`, we see

[source,console]
----
uart:~$ ieee802154 help
ieee802154 - IEEE 802.15.4 commands
Subcommands:
  ack             :<set/1 | unset/0> Set auto-ack flag
  associate       :<pan_id> <PAN coordinator short or long address (EUI-64)>
  disassociate    :Disassociate from network
  get_chan        :Get currently used channel
  get_ext_addr    :Get currently used extended address
  get_pan_id      :Get currently used PAN id
  get_short_addr  :Get currently used short address
  get_tx_power    :Get currently used TX power
  scan            :<passive|active> <channels set n[:m:...]:x|all> <per-channel
                   duration in ms>
  set_chan        :<channel> Set used channel
  set_ext_addr    :<long/extended address (EUI-64)> Set extended address
  set_pan_id      :<pan_id> Set used PAN id
  set_short_addr  :<short address> Set short address
  set_tx_power    :<-18/-7/-4/-2/0/1/2/3/5> Set TX power
----

We get the missing Channel number (frequency) with the command
`ieee802154 get_chan`.

[source,console]
----
uart:~$ ieee802154 get_chan
Channel 26
----

We get the missing PAN ID with the command `ieee802154 get_pan_id`.

[source,console]
----
uart:~$ ieee802154 get_pan_id
PAN ID 43981 (0xabcd)
----

===== Zephyr Shell: Network Commands

Additionally, we may query the IPv6 information of the Zephyr device.

[source,console]
----
uart:~$ net iface

Interface 0x20002b20 (IEEE 802.15.4) [1]
========================================
Link addr : CD:99:A1:1C:00:4B:12:00
MTU       : 125
IPv6 unicast addresses (max 3):
        fe80::cf99:a11c:4b:1200 autoconf preferred infinite
        2001:db8::1 manual preferred infinite
IPv6 multicast addresses (max 4):
        ff02::1
        ff02::1:ff4b:1200
        ff02::1:ff00:1
IPv6 prefixes (max 2):
        <none>
IPv6 hop limit           : 64
IPv6 base reachable time : 30000
IPv6 reachable time      : 16929
IPv6 retransmit timer    : 0
----

And we see that the static IPv6 address (`2001:db8::1`) from
`samples/net/sockets/echo_server/prj.conf` is present and configured.
While the statically configured IPv6 address is useful, it isn’t 100%
necessary.

[[linux]]
=== Linux

WARNING: If you aren't comfortable building and installing a Linux kernel on your computer,
you should probably just stop here. I'll assume you know the basics of building and installing
a Linux kernel from here on out.

==== Clone, patch, and build the kernel
For this demo, I used the 5.8.4 stable kernel. Also, I've applied the `mikrobus` kernel
driver, though it isn't strictly required for greybus.

NOTE: Again, `~` is just used as a placeholder and you can use whatever directory you'd like.

#TODO: The patches for gb-netlink will eventually be applied here until pushed into mainline.#

[source,console]
----
cd ~
git clone --branch v5.8.4 --single-branch git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git
cd linux
git checkout -b v5.8.4-greybus
git am ~/beagleconnect/sw/linux/v2-0001-RFC-mikroBUS-driver-for-add-on-boards.patch
git am ~/beagleconnect/sw/linux/0001-mikroBUS-build-fixes.patch
cp /boot/config-`uname -r` .config
yes "" | make oldconfig
./scripts/kconfig/merge_config.sh .config ~/beagleconnect/sw/linux/mikrobus.config
./scripts/kconfig/merge_config.sh .config ~/beagleconnect/sw/linux/atusb.config
make -j`nproc --all`
sudo make modules_install
sudo make install
----

Reboot and select your new kernel.

==== Probe the IEEE 802.15.4 Device Driver

On the Linux machine, make sure the `atusb` driver is loaded. This should happen automatically
when the adapter is inserted or when the machine is booted while the adapter is installed.

[source,console]
----
$ dmesg | grep -i ATUSB
[    6.512154] usb 1-1: ATUSB: AT86RF231 version 2
[    6.512492] usb 1-1: Firmware: major: 0, minor: 3, hardware type: ATUSB (2)
[    6.525357] usbcore: registered new interface driver atusb
...
----

We should now be able to see the IEEE 802.15.4 network device by
entering `ip a show wpan0`.

[source,console]
----
$ ip a show wpan0
36: wpan0: <BROADCAST,NOARP,UP,LOWER_UP> mtu 123 qdisc fq_codel state UNKNOWN group default qlen 300
    link/ieee802.15.4 3e:7d:90:4d:8f:00:76:a2 brd ff:ff:ff:ff:ff:ff:ff:ff
----

But wait, that is not an IP address! It’s the hardware address of the
802.15.4 device. So, in order to associate it with an IP address, we
need to run a couple of other commands (thanks to
http://wpan.cakelab.org/[cakelab.org]).

==== Set the 802.15.4 Physical and Link-Layer Parameters

[arabic]
. First, get the phy number for the `wpan0` device
+
[source,console]
----
$ iwpan list
     wpan_phy phy0
     supported channels:
        page 0: 11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26
      current_page: 0
     current_channel: 26,  2480 MHz
     cca_mode: (1) Energy above threshold
     cca_ed_level: -77
     tx_power: 3
     capabilities:
         iftypes: node,monitor
          channels:
             page 0:
                  [11]  2405 MHz, [12]  2410 MHz, [13]  2415 MHz,
                  [14]  2420 MHz, [15]  2425 MHz, [16]  2430 MHz,
                  [17]  2435 MHz, [18]  2440 MHz, [19]  2445 MHz,
                  [20]  2450 MHz, [21]  2455 MHz, [22]  2460 MHz,
                  [23]  2465 MHz, [24]  2470 MHz, [25]  2475 MHz,
                  [26]  2480 MHz
           tx_powers:
                  3 dBm, 2.8 dBm, 2.3 dBm, 1.8 dBm, 1.3 dBm, 0.7 dBm,
                  0 dBm, -1 dBm, -2 dBm, -3 dBm, -4 dBm, -5 dBm,
                  -7 dBm, -9 dBm, -12 dBm, -17 dBm,
          cca_ed_levels:
                  -91 dBm, -89 dBm, -87 dBm, -85 dBm, -83 dBm, -81 dBm,
                  -79 dBm, -77 dBm, -75 dBm, -73 dBm, -71 dBm, -69 dBm,
                  -67 dBm, -65 dBm, -63 dBm, -61 dBm,
          cca_modes:
              (1) Energy above threshold
             (2) Carrier sense only
             (3, cca_opt: 0) Carrier sense with energy above threshold (logical operator is 'and')
             (3, cca_opt: 1) Carrier sense with energy above threshold (logical operator is 'or')
         min_be: 0,1,2,3,4,5,6,7,8
          max_be: 3,4,5,6,7,8
          csma_backoffs: 0,1,2,3,4,5
          frame_retries: 3
          lbt: false
----
+
. Next, set the Channel for the 802.15.4 device on the Linux machine
+
[source,console]
----
sudo iwpan phy phy0 set channel 0 26
----
+
. Then, set the PAN identifier for the 802.15.4 device on the Linux
machine `sudo iwpan dev wpan0 set pan_id 0xabcd` ## Create a
6LowPAN Network Interface
. Associate the `wpan0` device to a new, 6lowpan network interface
+
[source,console]
----
sudo ip link add link wpan0 name lowpan0 type lowpan
----
+
. Finally, set the links up for both `wpan0` and `lowpan0`
+
[source,console]
----
sudo ip link set wpan0 up
sudo ip link set lowpan0 up
----

We should observe something like the following when we run
`ip a show lowpan0`.

[source,console]
----
ip a show lowpan0
37: lowpan0@wpan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1280 qdisc noqueue state UNKNOWN group default qlen 1000
    link/6lowpan 9e:0b:a4:e8:00:d3:45:53 brd ff:ff:ff:ff:ff:ff:ff:ff
    inet6 fe80::9c0b:a4e8:d3:4553/64 scope link 
       valid_lft forever preferred_lft forever
----

=== Ping Pong

==== Broadcast Ping

Now, perform a broadcast ping to see what else is listening on
`lowpan0`.

[source,console]
----
$ ping6 -I lowpan0 ff02::1
PING ff02::1(ff02::1) from fe80::9c0b:a4e8:d3:4553%lowpan0 lowpan0: 56 data bytes
64 bytes from fe80::9c0b:a4e8:d3:4553%lowpan0: icmp_seq=1 ttl=64 time=0.099 ms
64 bytes from fe80::9c0b:a4e8:d3:4553%lowpan0: icmp_seq=2 ttl=64 time=0.125 ms
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=2 ttl=64 time=17.3 ms (DUP!)
64 bytes from fe80::9c0b:a4e8:d3:4553%lowpan0: icmp_seq=3 ttl=64 time=0.126 ms
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=3 ttl=64 time=9.60 ms (DUP!)
64 bytes from fe80::9c0b:a4e8:d3:4553%lowpan0: icmp_seq=4 ttl=64 time=0.131 ms
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=4 ttl=64 time=14.9 ms (DUP!)
----

Yay! We have pinged (pung?) the Zephyr device over IEEE 802.15.4 using
6LowPAN!

==== Ping Zephyr

We can ping the Zephyr device directly without a broadcast ping too, of
course.

[source,console]
----
$ ping6 -I lowpan0 fe80::cf99:a11c:4b:1200
PING fe80::cf99:a11c:4b:1200(fe80::cf99:a11c:4b:1200) from fe80::9c0b:a4e8:d3:4553%lowpan0 lowpan0: 56 data bytes
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=1 ttl=64 time=16.0 ms
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=2 ttl=64 time=13.8 ms
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=3 ttl=64 time=9.77 ms
64 bytes from fe80::cf99:a11c:4b:1200%lowpan0: icmp_seq=5 ttl=64 time=11.5 ms
----

==== Ping Linux

Similarly, we can ping the Linux host from the Zephyr shell.

[source,console]
----
uart:~$ net ping --help
ping - Ping a network host.
Subcommands:
  --help  :'net ping [-c count] [-i interval ms] <host>' Send ICMPv4 or ICMPv6
           Echo-Request to a network host.
$ net ping -c 5 fe80::9c0b:a4e8:d3:4553
PING fe80::9c0b:a4e8:d3:4553
8 bytes from fe80::9c0b:a4e8:d3:4553 to fe80::cf99:a11c:4b:1200: icmp_seq=0 ttl=64 rssi=110 time=11 ms
8 bytes from fe80::9c0b:a4e8:d3:4553 to fe80::cf99:a11c:4b:1200: icmp_seq=1 ttl=64 rssi=126 time=9 ms
8 bytes from fe80::9c0b:a4e8:d3:4553 to fe80::cf99:a11c:4b:1200: icmp_seq=2 ttl=64 rssi=128 time=13 ms
8 bytes from fe80::9c0b:a4e8:d3:4553 to fe80::cf99:a11c:4b:1200: icmp_seq=3 ttl=64 rssi=126 time=10 ms
8 bytes from fe80::9c0b:a4e8:d3:4553 to fe80::cf99:a11c:4b:1200: icmp_seq=4 ttl=64 rssi=126 time=7 ms
----

==== Assign a Static Address

So far, we have been using IPv6 Link-Local addressing. However, the
Zephyr application is configured to use a statically configured IPv6
address as well which is, namely `2001:db8::1`.

If we add a similar static IPv6 address to our Linux IEEE 802.15.4
network interface, `lowpan0`, then we should expect to be able to reach
that as well.

In Linux, run the following

[source,console]
----
sudo ip -6 addr add 2001:db8::2/64 dev lowpan0
----

We can verify that the address has been set by examining the `lowpan0`
network interface again.

[source,console]
----
$ ip a show lowpan0
37: lowpan0@wpan0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1280 qdisc noqueue state UNKNOWN group default qlen 1000
    link/6lowpan 9e:0b:a4:e8:00:d3:45:53 brd ff:ff:ff:ff:ff:ff:ff:ff
    inet6 2001:db8::2/64 scope global 
       valid_lft forever preferred_lft forever
    inet6 fe80::9c0b:a4e8:d3:4553/64 scope link 
       valid_lft forever preferred_lft forever
----

Lastly, ping the statically configured IPv6 address of the Zephyr
device.

[source,console]
----
$ ping6 2001:db8::1
PING 2001:db8::1(2001:db8::1) 56 data bytes
64 bytes from 2001:db8::1: icmp_seq=2 ttl=64 time=53.7 ms
64 bytes from 2001:db8::1: icmp_seq=3 ttl=64 time=13.1 ms
64 bytes from 2001:db8::1: icmp_seq=4 ttl=64 time=22.0 ms
64 bytes from 2001:db8::1: icmp_seq=5 ttl=64 time=22.7 ms
64 bytes from 2001:db8::1: icmp_seq=6 ttl=64 time=18.4 ms
----

Now that we have set up a reliable transport, let’s move on to the
application layer.

=== Greybus

Hopefully the videos listed earlier provide a sufficient foundation to
understand what will happen shortly. However, there is still a bit more
preparation required.

==== Build and probe Greybus Kernel Modules

Greybus was originally intended to work exclusively on the UniPro
physical layer. However, we’re using RF as our physical layer and TCP/IP
as our transport. As such, there was need to be able to communicate with
the Linux Greybus facilities through userspace, and out of that need
arose gb-netlink. The Netlink Greybus module actually does not care
about the physical layer, but is happy to usher Greybus messages back
and forth between the kernel and userspace.

Build and probe the gb-netlink modules (as well as the other Greybus
modules) with the following:

[source,console]
----
cd ${WORKSPACE}/sw/greybus
make -j`nproc --all`
sudo make install
../load_gb_modules.sh
----

==== Build and Run Gbridge

The gbridge utility was created as a proof of concept to abstract the
Greybus Netlink datapath among several reliable transports. For the
purposes of this tutorial, we’ll be using it as a TCP/IP bridge.

To run `gbridge`, perform the following:

[source,console]
----
sudo apt install -y libnl-3-dev libnl-genl-3-dev libbluetooth-dev libavahi-client-dev
cd gbridge
autoreconf -vfi
GBNETLINKDIR=${PWD}/../greybus \
  ./configure --enable-uart --enable-tcpip --disable-gbsim --enable-netlink --disable-bluetooth
make -j`nproc --all`
sudo make install
gbridge
----

=== Blinky!

Now that we have set up a reliable TCP transport, and set up the Greybus
modules in the Linux kernel, and used Gbridge to connect a Greybus node
to the Linux kernel via TCP/IP, we can now get to the heart of the
demonstration!

First, save the following script as `blinky.sh`.

[source,bash]
----
#!/bin/bash
​
# Blinky Demo for CC1352R SensorTag
​
# /dev/gpiochipN that Greybus created
CHIP="$(gpiodetect | grep greybus_gpio | head -n 1 | awk '{print $1}')"
​
# red, green, blue LED pins
RED=6
GREEN=7
BLUE=21
​
# Bash array for pins and values
PINS=($RED $GREEN $BLUE)
NPINS=${#PINS[@]}
​
for ((;;)); do
    for i in ${!PINS[@]}; do
        # turn off previous pin
        if [ $i -eq 0 ]; then
            PREV=2
        else
            PREV=$((i-1))
        fi
        gpioset $CHIP ${PINS[$PREV]}=0
​
        # turn on current pin
        gpioset $CHIP ${PINS[$i]}=1
​
        # wait a sec
        sleep 1
    done
done
----

Second, run the script with root privileges: `sudo bash blinky.sh`

The output of your minicom session should resemble the following.

[source,console]
----
$ *** Booting Zephyr OS build zephyr-v2.3.0-1435-g40c0ed940d71  ***
[00:00:00.011,932] <inf> net_config: Initializing network
[00:00:00.111,938] <inf> net_config: IPv6 address: fe80::6c42:bc1c:4b:1200
[00:00:00.112,121] <dbg> greybus_service.greybus_service_init: Greybus initializing..
[00:00:00.112,426] <dbg> greybus_transport_tcpip.gb_transport_backend_init: Greybus TCP/IP Transport initializing..
[00:00:00.112,579] <dbg> greybus_transport_tcpip.netsetup: created server socket 0 for cport 0
[00:00:00.112,579] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 0
[00:00:00.112,609] <dbg> greybus_transport_tcpip.netsetup: binding socket 0 (cport 0) to port 4242
[00:00:00.112,640] <dbg> greybus_transport_tcpip.netsetup: listening on socket 0 (cport 0)
[00:00:00.112,823] <dbg> greybus_transport_tcpip.netsetup: created server socket 1 for cport 1
[00:00:00.112,823] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 1
[00:00:00.112,854] <dbg> greybus_transport_tcpip.netsetup: binding socket 1 (cport 1) to port 4243
[00:00:00.112,854] <dbg> greybus_transport_tcpip.netsetup: listening on socket 1 (cport 1)
[00:00:00.113,037] <inf> net_config: IPv6 address: fe80::6c42:bc1c:4b:1200
[00:00:00.113,250] <dbg> greybus_transport_tcpip.netsetup: created server socket 2 for cport 2
[00:00:00.113,250] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 2
[00:00:00.113,281] <dbg> greybus_transport_tcpip.netsetup: binding socket 2 (cport 2) to port 4244
[00:00:00.113,311] <dbg> greybus_transport_tcpip.netsetup: listening on socket 2 (cport 2)
[00:00:00.113,494] <dbg> greybus_transport_tcpip.netsetup: created server socket 3 for cport 3
[00:00:00.113,494] <dbg> greybus_transport_tcpip.netsetup: setting socket options for socket 3
[00:00:00.113,525] <dbg> greybus_transport_tcpip.netsetup: binding socket 3 (cport 3) to port 4245
[00:00:00.113,555] <dbg> greybus_transport_tcpip.netsetup: listening on socket 3 (cport 3)
[00:00:00.113,861] <inf> greybus_transport_tcpip: Greybus TCP/IP Transport initialized
[00:00:00.116,149] <inf> greybus_service: Greybus is active
[00:00:00.116,546] <dbg> greybus_transport_tcpip.accept_loop: calling poll
[00:45:08.397,399] <dbg> greybus_transport_tcpip.accept_loop: poll returned 1
[00:45:08.397,399] <dbg> greybus_transport_tcpip.accept_loop: socket 0 (cport 0) has traffic
[00:45:08.397,491] <dbg> greybus_transport_tcpip.accept_loop: accepted connection from [2001:db8::2]:39638 as fd 4
[00:45:08.397,491] <dbg> greybus_transport_tcpip.accept_loop: spawning client thread..
[00:45:08.397,735] <dbg> greybus_transport_tcpip.accept_loop: calling poll
[00:45:08.491,363] <dbg> greybus_transport_tcpip.accept_loop: poll returned 1
[00:45:08.491,363] <dbg> greybus_transport_tcpip.accept_loop: socket 3 (cport 3) has traffic
[00:45:08.491,455] <dbg> greybus_transport_tcpip.accept_loop: accepted connection from [2001:db8::2]:39890 as fd 5
[00:45:08.491,455] <dbg> greybus_transport_tcpip.accept_loop: spawning client thread..
[00:45:08.491,699] <dbg> greybus_transport_tcpip.accept_loop: calling poll
[00:45:08.620,056] <dbg> greybus_transport_tcpip.accept_loop: poll returned 1
[00:45:08.620,086] <dbg> greybus_transport_tcpip.accept_loop: socket 2 (cport 2) has traffic
[00:45:08.620,147] <dbg> greybus_transport_tcpip.accept_loop: accepted connection from [2001:db8::2]:42422 as fd 6
[00:45:08.620,147] <dbg> greybus_transport_tcpip.accept_loop: spawning client thread..
[00:45:08.620,422] <dbg> greybus_transport_tcpip.accept_loop: calling poll
[00:45:08.679,504] <dbg> greybus_transport_tcpip.accept_loop: poll returned 1
[00:45:08.679,534] <dbg> greybus_transport_tcpip.accept_loop: socket 1 (cport 1) has traffic
[00:45:08.679,595] <dbg> greybus_transport_tcpip.accept_loop: accepted connection from [2001:db8::2]:48286 as fd 7
[00:45:08.679,595] <dbg> greybus_transport_tcpip.accept_loop: spawning client thread..
[00:45:08.679,870] <dbg> greybus_transport_tcpip.accept_loop: calling poll
...
----

=== Read I2C Registers

The SensorTag comes with an opt3001 ambient light sensor as well as an
hdc2080 temperature & humidity sensor.

First, find which i2c device corresponds to the SensorTag:

[source,bash]
----
ls -la /sys/bus/i2c/devices/* | grep "greybus"
lrwxrwxrwx 1 root root 0 Aug 15 11:24 /sys/bus/i2c/devices/i2c-8 -> ../../../devices/virtual/gb_nl/gn_nl/greybus1/1-2/1-2.2/1-2.2.2/gbphy2/i2c-8
----

On my machine, the i2c device node that Greybus creates is /dev/i2c-8.

Read the ID registers (at the i2c register address 0x7e) of the opt3001
sensor (at i2c bus address 0x44) as shown below:

[source,bash]
----
i2cget -y 8 0x44 0x7e w
0x4954
----

Read the ID registers (at the i2c register address 0xfc) of the hdc2080
sensor (at i2c bus address 0x41) as shown below:

[source,bash]
----
i2cget -y 8 0x41 0xfc w 
0x5449
----

=== Conclusion

The blinking LED can and poking i2c registers can be a somewhat
anticlimactic, but hopefully it illustrates the potential for Greybus as
an IoT application layer protocol.

What is nice about this demo, is that we’re using Device Tree to
describe our Greybus Peripheral declaratively, they Greybus Manifest is
automatically generated, and the Greybus Service is automatically
started in Zephyr.

In other words, all that is required to replicate this for other IoT
devices is simply an appropriate Device Tree overlay file.

The proof-of-concept involving Linux, Zephyr, and IEEE 802.15.4 was
actually fairly straight forward and was accomplished with mostly
already-upstream source.

For Greybus in Zephyr, there is still a considerable amount of
integration work to be done, including * converting the fork to a proper
Zephyr module * adding security and authentication * automatic
detection, joining, and rejoining of devices

Thanks for reading, and we hope you’ve enjoyed this tutorial.

[[demo-2]]
== Sub-GHz IEEE 802.15.4 Greybus demo for GPIO and I2C

=== Setup

1. Clone or update source
+
NOTE: If you have already cloned the source, skip this part and go to the second part of this step.
+
[source,bash]
----
cd ~
git clone --recurse-submodules --branch demo https://github.com/jadonk/beagleconnect
----
+
NOTE: If you just cloned the source, you don't need to perform this update.
+
[source,bash]
----
cd ~
git pull --recurse-submodules
----
+
2. MSP430 toolchain
+
[source,bash]
----
cd ~/beagleconnect/sw/
wget http://software-dl.ti.com/msp430/msp430_public_sw/mcu/msp430/MSPGCC/9_2_0_0/export/msp430-gcc-full-linux-x64-installer-9.2.0.0.run
chmod +x msp430-gcc-full-linux-x64-installer-9.2.0.0.run
sudo ./msp430-gcc-full-linux-x64-installer-9.2.0.0.run --mode unattended --prefix /opt/msp430-gcc
----
+
3. MSP430 flashing utility
+
[source,bash]
----
cd ~/beagleconnect/sw/ti_msp430_python_tools/python-msp430-tools
python2 setup.py install --user
----
+
4. CC1352 Zephyr toolchain
+
[source,bash]
----
sudo apt install -y --no-install-recommends git cmake ninja-build gperf \
  ccache dfu-util device-tree-compiler wget \
  python3-dev python3-pip python3-setuptools python3-tk python3-wheel xz-utils file \
  make gcc gcc-multilib g++-multilib libsdl2-dev \
  cmake
pip3 install --user -U west
wget "https://github.com/zephyrproject-rtos/sdk-ng/releases/download/v0.11.4/zephyr-sdk-0.11.4-setup.run"
chmod +x zephyr-sdk-0.11.4-setup.run
./zephyr-sdk-0.11.4-setup.run -- -d ~/zephyr-sdk-0.11.4
export PATH=~/.local/bin:"$PATH"
export ZEPHYR_TOOLCHAIN_VARIANT=zephyr
export ZEPHYR_SDK_INSTALL_DIR=~/zephyr-sdk-0.11.4
export USE_CCACHE=1
cd ~/beagleconnect/sw/zephyrproject/zephyr
west update
west zephyr-export
pip3 install --user -r scripts/requirements.txt
----
+
5. Linux gateway via buildroot
+
[source,bash]
----
cd
wget "https://buildroot.org/downloads/buildroot-2020.08.tar.gz"
tar xzf buildroot-2020.08.tar.gz
cd ~/beagleconnect/sw/buildroot
make -C ~/buildroot-2020.08 O=$PWD BR2_EXTERNAL=$PWD beagleconnect_gateway_qemu_x86_64_defconfig
----

=== Building

1. MSP430
+
[source,bash]
----
cd ~/beagleconnect/sw/usb_uart_bridge
MSP430_TOOLCHAIN_PATH=/opt/msp430-gcc make
cd ~/beagleconnect/sw/usb_wpan_temp
MSP430_TOOLCHAIN_PATH=/opt/msp430-gcc make
----
+
2. CC1352 Zephyr-based firmware for node and gateway
+
[source,bash]
----
cd ~/beagleconnect/sw/zephyrproject/zephyr
west build -p always -b cc1352r1_launchxl samples/subsys/greybus/net -d build/greybus_launchpad -- -DOVERLAY_CONFIG=overlay-802154-subg.conf -DCONFIG_NET_CONFIG_IEEE802154_DEV_NAME="IEEE802154_1" -DCONFIG_IEEE802154_CC13XX_CC26XX=n -DCONFIG_IEEE802154_CC13XX_CC26XX_SUB_GHZ=y
west build -p always -b beagle_connect -d $PWD/build/wpanusb_beagleconnect $PWD/../wpanusb_bc -- -DOVERLAY_CONFIG=overlay-subghz.conf
----
+
3. Buildroot
+
[source,bash]
----
cd ~/beagleconnectd/sw/buildroot
make
----

=== Flashing

==== Gateway

1. Connect _BeagleConnect™ Freedom_ via USB while holding the USER button.
+
2. Flash _BeagleConnect™ Freedom_ MSP430 with temporary firmware for flashing CC1352 using python2 script and MSP430 ROM bootloader.
+
[source,bash]
----
cd ~/beagleconnect/sw/usb_uart_bridge
MSP430_TOOLCHAIN_PATH=/opt/msp430-gcc make program
----
+
3. Flash _BeagleConnect™ Freedom_ CC1352 with gateway firmware using `west` and CC1352 ROM bootloader over MSP430 USB to UART connection.
+
NOTE: Make sure no instances of `tio` or `qemu` are running that would capture the serial port.
+
NOTE: Be sure to replace `~` and `/dev/ttyACM0` with appropriate values for your setup. Use `dmesg | tail` to discover the correct tty.
+
[source,bash]
----
cd ~/beagleconnect/sw/zephyrproject/zephyr
west flash -d $PWD/build/wpanusb_beagleconnect /dev/ttyACM0
----
+
4. Disconnect and reconnect _BeagleConnect™ Freedom_ via USB while holding the USER button.
+
5. Flash MSP430 with gateway software using python2 script and MSP430 ROM bootloader.
+
[source,bash]
----
cd ~/beagleconnect/sw/usb_wpan_temp
MSP430_TOOLCHAIN_PATH=/opt/msp430-gcc make program
----

==== Node

1. Connect _CC1352R1 Launchpad_ via USB.
+
2. Flash _CC1352R1 Launchpad_ using `west`.
+
[source,bash]
----
cd ~/beagleconnect/sw/zephyrproject/zephyr
west flash -d build/greybus_launchpad
----

=== Run

1. Disconnect and reconnect _BeagleConnect™ Freedom_.
+
2. Start emulator.
+
[source,bash]
----
cd ~/beagleconnect/sw/buildroot
./run
----
+
4. Login using username `root` and password `tempppwd`.
5. Start gbridge.
+
[source,bash]
----
/opt/gbridge.sh
----

